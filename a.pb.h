// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a.proto

#ifndef PROTOBUF_a_2eproto__INCLUDED
#define PROTOBUF_a_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_a_2eproto();
void protobuf_AssignDesc_a_2eproto();
void protobuf_ShutdownFile_a_2eproto();

class Playlist;
class Playlist_Audio;
class Playlists;

// ===================================================================

class Playlist_Audio : public ::google::protobuf::Message {
 public:
  Playlist_Audio();
  virtual ~Playlist_Audio();

  Playlist_Audio(const Playlist_Audio& from);

  inline Playlist_Audio& operator=(const Playlist_Audio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Playlist_Audio& default_instance();

  void Swap(Playlist_Audio* other);

  // implements Message ----------------------------------------------

  Playlist_Audio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Playlist_Audio& from);
  void MergeFrom(const Playlist_Audio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:protobuf.Playlist.Audio)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  friend void  protobuf_AddDesc_a_2eproto();
  friend void protobuf_AssignDesc_a_2eproto();
  friend void protobuf_ShutdownFile_a_2eproto();

  void InitAsDefaultInstance();
  static Playlist_Audio* default_instance_;
};
// -------------------------------------------------------------------

class Playlist : public ::google::protobuf::Message {
 public:
  Playlist();
  virtual ~Playlist();

  Playlist(const Playlist& from);

  inline Playlist& operator=(const Playlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Playlist& default_instance();

  void Swap(Playlist* other);

  // implements Message ----------------------------------------------

  Playlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Playlist& from);
  void MergeFrom(const Playlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Playlist_Audio Audio;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .protobuf.Playlist.Audio audio = 2;
  inline int audio_size() const;
  inline void clear_audio();
  static const int kAudioFieldNumber = 2;
  inline const ::protobuf::Playlist_Audio& audio(int index) const;
  inline ::protobuf::Playlist_Audio* mutable_audio(int index);
  inline ::protobuf::Playlist_Audio* add_audio();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Playlist_Audio >&
      audio() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::Playlist_Audio >*
      mutable_audio();

  // @@protoc_insertion_point(class_scope:protobuf.Playlist)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::Playlist_Audio > audio_;
  friend void  protobuf_AddDesc_a_2eproto();
  friend void protobuf_AssignDesc_a_2eproto();
  friend void protobuf_ShutdownFile_a_2eproto();

  void InitAsDefaultInstance();
  static Playlist* default_instance_;
};
// -------------------------------------------------------------------

class Playlists : public ::google::protobuf::Message {
 public:
  Playlists();
  virtual ~Playlists();

  Playlists(const Playlists& from);

  inline Playlists& operator=(const Playlists& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Playlists& default_instance();

  void Swap(Playlists* other);

  // implements Message ----------------------------------------------

  Playlists* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Playlists& from);
  void MergeFrom(const Playlists& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf.Playlist playlist = 1;
  inline int playlist_size() const;
  inline void clear_playlist();
  static const int kPlaylistFieldNumber = 1;
  inline const ::protobuf::Playlist& playlist(int index) const;
  inline ::protobuf::Playlist* mutable_playlist(int index);
  inline ::protobuf::Playlist* add_playlist();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Playlist >&
      playlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::Playlist >*
      mutable_playlist();

  // @@protoc_insertion_point(class_scope:protobuf.Playlists)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::Playlist > playlist_;
  friend void  protobuf_AddDesc_a_2eproto();
  friend void protobuf_AssignDesc_a_2eproto();
  friend void protobuf_ShutdownFile_a_2eproto();

  void InitAsDefaultInstance();
  static Playlists* default_instance_;
};
// ===================================================================


// ===================================================================

// Playlist_Audio

// required string path = 1;
inline bool Playlist_Audio::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Playlist_Audio::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Playlist_Audio::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Playlist_Audio::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Playlist_Audio::path() const {
  // @@protoc_insertion_point(field_get:protobuf.Playlist.Audio.path)
  return *path_;
}
inline void Playlist_Audio::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.Playlist.Audio.path)
}
inline void Playlist_Audio::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.Playlist.Audio.path)
}
inline void Playlist_Audio::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.Playlist.Audio.path)
}
inline ::std::string* Playlist_Audio::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.Playlist.Audio.path)
  return path_;
}
inline ::std::string* Playlist_Audio::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Playlist_Audio::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Playlist.Audio.path)
}

// -------------------------------------------------------------------

// Playlist

// required string name = 1;
inline bool Playlist::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Playlist::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Playlist::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Playlist::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Playlist::name() const {
  // @@protoc_insertion_point(field_get:protobuf.Playlist.name)
  return *name_;
}
inline void Playlist::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:protobuf.Playlist.name)
}
inline void Playlist::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf.Playlist.name)
}
inline void Playlist::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf.Playlist.name)
}
inline ::std::string* Playlist::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.Playlist.name)
  return name_;
}
inline ::std::string* Playlist::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Playlist::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Playlist.name)
}

// repeated .protobuf.Playlist.Audio audio = 2;
inline int Playlist::audio_size() const {
  return audio_.size();
}
inline void Playlist::clear_audio() {
  audio_.Clear();
}
inline const ::protobuf::Playlist_Audio& Playlist::audio(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Playlist.audio)
  return audio_.Get(index);
}
inline ::protobuf::Playlist_Audio* Playlist::mutable_audio(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Playlist.audio)
  return audio_.Mutable(index);
}
inline ::protobuf::Playlist_Audio* Playlist::add_audio() {
  // @@protoc_insertion_point(field_add:protobuf.Playlist.audio)
  return audio_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Playlist_Audio >&
Playlist::audio() const {
  // @@protoc_insertion_point(field_list:protobuf.Playlist.audio)
  return audio_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::Playlist_Audio >*
Playlist::mutable_audio() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Playlist.audio)
  return &audio_;
}

// -------------------------------------------------------------------

// Playlists

// repeated .protobuf.Playlist playlist = 1;
inline int Playlists::playlist_size() const {
  return playlist_.size();
}
inline void Playlists::clear_playlist() {
  playlist_.Clear();
}
inline const ::protobuf::Playlist& Playlists::playlist(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Playlists.playlist)
  return playlist_.Get(index);
}
inline ::protobuf::Playlist* Playlists::mutable_playlist(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Playlists.playlist)
  return playlist_.Mutable(index);
}
inline ::protobuf::Playlist* Playlists::add_playlist() {
  // @@protoc_insertion_point(field_add:protobuf.Playlists.playlist)
  return playlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Playlist >&
Playlists::playlist() const {
  // @@protoc_insertion_point(field_list:protobuf.Playlists.playlist)
  return playlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::Playlist >*
Playlists::mutable_playlist() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Playlists.playlist)
  return &playlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_a_2eproto__INCLUDED
