// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlists.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "playlists.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Playlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Playlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* Playlist_Audio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Playlist_Audio_reflection_ = NULL;
const ::google::protobuf::Descriptor* Playlists_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Playlists_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_playlists_2eproto() {
  protobuf_AddDesc_playlists_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "playlists.proto");
  GOOGLE_CHECK(file != NULL);
  Playlist_descriptor_ = file->message_type(0);
  static const int Playlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, audio_),
  };
  Playlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Playlist_descriptor_,
      Playlist::default_instance_,
      Playlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Playlist));
  Playlist_Audio_descriptor_ = Playlist_descriptor_->nested_type(0);
  static const int Playlist_Audio_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist_Audio, path_),
  };
  Playlist_Audio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Playlist_Audio_descriptor_,
      Playlist_Audio::default_instance_,
      Playlist_Audio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist_Audio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlist_Audio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Playlist_Audio));
  Playlists_descriptor_ = file->message_type(1);
  static const int Playlists_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists, playlist_),
  };
  Playlists_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Playlists_descriptor_,
      Playlists::default_instance_,
      Playlists_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Playlists, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Playlists));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_playlists_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Playlist_descriptor_, &Playlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Playlist_Audio_descriptor_, &Playlist_Audio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Playlists_descriptor_, &Playlists::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_playlists_2eproto() {
  delete Playlist::default_instance_;
  delete Playlist_reflection_;
  delete Playlist_Audio::default_instance_;
  delete Playlist_Audio_reflection_;
  delete Playlists::default_instance_;
  delete Playlists_reflection_;
}

void protobuf_AddDesc_playlists_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017playlists.proto\022\010protobuf\"X\n\010Playlist\022"
    "\014\n\004name\030\001 \002(\t\022\'\n\005audio\030\002 \003(\0132\030.protobuf."
    "Playlist.Audio\032\025\n\005Audio\022\014\n\004path\030\001 \002(\t\"1\n"
    "\tPlaylists\022$\n\010playlist\030\001 \003(\0132\022.protobuf."
    "Playlist", 168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "playlists.proto", &protobuf_RegisterTypes);
  Playlist::default_instance_ = new Playlist();
  Playlist_Audio::default_instance_ = new Playlist_Audio();
  Playlists::default_instance_ = new Playlists();
  Playlist::default_instance_->InitAsDefaultInstance();
  Playlist_Audio::default_instance_->InitAsDefaultInstance();
  Playlists::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_playlists_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_playlists_2eproto {
  StaticDescriptorInitializer_playlists_2eproto() {
    protobuf_AddDesc_playlists_2eproto();
  }
} static_descriptor_initializer_playlists_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Playlist_Audio::kPathFieldNumber;
#endif  // !_MSC_VER

Playlist_Audio::Playlist_Audio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Playlist.Audio)
}

void Playlist_Audio::InitAsDefaultInstance() {
}

Playlist_Audio::Playlist_Audio(const Playlist_Audio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.Playlist.Audio)
}

void Playlist_Audio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Playlist_Audio::~Playlist_Audio() {
  // @@protoc_insertion_point(destructor:protobuf.Playlist.Audio)
  SharedDtor();
}

void Playlist_Audio::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void Playlist_Audio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Playlist_Audio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Playlist_Audio_descriptor_;
}

const Playlist_Audio& Playlist_Audio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlists_2eproto();
  return *default_instance_;
}

Playlist_Audio* Playlist_Audio::default_instance_ = NULL;

Playlist_Audio* Playlist_Audio::New() const {
  return new Playlist_Audio;
}

void Playlist_Audio::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Playlist_Audio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.Playlist.Audio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.Playlist.Audio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.Playlist.Audio)
  return false;
#undef DO_
}

void Playlist_Audio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.Playlist.Audio)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.Playlist.Audio)
}

::google::protobuf::uint8* Playlist_Audio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Playlist.Audio)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Playlist.Audio)
  return target;
}

int Playlist_Audio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Playlist_Audio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Playlist_Audio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Playlist_Audio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Playlist_Audio::MergeFrom(const Playlist_Audio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Playlist_Audio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Playlist_Audio::CopyFrom(const Playlist_Audio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Playlist_Audio::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Playlist_Audio::Swap(Playlist_Audio* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Playlist_Audio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Playlist_Audio_descriptor_;
  metadata.reflection = Playlist_Audio_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Playlist::kNameFieldNumber;
const int Playlist::kAudioFieldNumber;
#endif  // !_MSC_VER

Playlist::Playlist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Playlist)
}

void Playlist::InitAsDefaultInstance() {
}

Playlist::Playlist(const Playlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.Playlist)
}

void Playlist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Playlist::~Playlist() {
  // @@protoc_insertion_point(destructor:protobuf.Playlist)
  SharedDtor();
}

void Playlist::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Playlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Playlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Playlist_descriptor_;
}

const Playlist& Playlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlists_2eproto();
  return *default_instance_;
}

Playlist* Playlist::default_instance_ = NULL;

Playlist* Playlist::New() const {
  return new Playlist;
}

void Playlist::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  audio_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Playlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.Playlist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_audio;
        break;
      }

      // repeated .protobuf.Playlist.Audio audio = 2;
      case 2: {
        if (tag == 18) {
         parse_audio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_audio;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.Playlist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.Playlist)
  return false;
#undef DO_
}

void Playlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.Playlist)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .protobuf.Playlist.Audio audio = 2;
  for (int i = 0; i < this->audio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->audio(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.Playlist)
}

::google::protobuf::uint8* Playlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Playlist)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .protobuf.Playlist.Audio audio = 2;
  for (int i = 0; i < this->audio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->audio(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Playlist)
  return target;
}

int Playlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .protobuf.Playlist.Audio audio = 2;
  total_size += 1 * this->audio_size();
  for (int i = 0; i < this->audio_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->audio(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Playlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Playlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Playlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Playlist::MergeFrom(const Playlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  audio_.MergeFrom(from.audio_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Playlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Playlist::CopyFrom(const Playlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Playlist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->audio())) return false;
  return true;
}

void Playlist::Swap(Playlist* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    audio_.Swap(&other->audio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Playlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Playlist_descriptor_;
  metadata.reflection = Playlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Playlists::kPlaylistFieldNumber;
#endif  // !_MSC_VER

Playlists::Playlists()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Playlists)
}

void Playlists::InitAsDefaultInstance() {
}

Playlists::Playlists(const Playlists& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.Playlists)
}

void Playlists::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Playlists::~Playlists() {
  // @@protoc_insertion_point(destructor:protobuf.Playlists)
  SharedDtor();
}

void Playlists::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Playlists::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Playlists::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Playlists_descriptor_;
}

const Playlists& Playlists::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playlists_2eproto();
  return *default_instance_;
}

Playlists* Playlists::default_instance_ = NULL;

Playlists* Playlists::New() const {
  return new Playlists;
}

void Playlists::Clear() {
  playlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Playlists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.Playlists)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.Playlist playlist = 1;
      case 1: {
        if (tag == 10) {
         parse_playlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_playlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.Playlists)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.Playlists)
  return false;
#undef DO_
}

void Playlists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.Playlists)
  // repeated .protobuf.Playlist playlist = 1;
  for (int i = 0; i < this->playlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.Playlists)
}

::google::protobuf::uint8* Playlists::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Playlists)
  // repeated .protobuf.Playlist playlist = 1;
  for (int i = 0; i < this->playlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Playlists)
  return target;
}

int Playlists::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.Playlist playlist = 1;
  total_size += 1 * this->playlist_size();
  for (int i = 0; i < this->playlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Playlists::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Playlists* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Playlists*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Playlists::MergeFrom(const Playlists& from) {
  GOOGLE_CHECK_NE(&from, this);
  playlist_.MergeFrom(from.playlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Playlists::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Playlists::CopyFrom(const Playlists& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Playlists::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->playlist())) return false;
  return true;
}

void Playlists::Swap(Playlists* other) {
  if (other != this) {
    playlist_.Swap(&other->playlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Playlists::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Playlists_descriptor_;
  metadata.reflection = Playlists_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
